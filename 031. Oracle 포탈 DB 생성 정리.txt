==============================
포탈 DB OBJECT 추출
==============================
SET ECHO OFF
SET TERM OFF
SET FEEDBACK OFF

SET TRIMOUT ON
SET TRIMSPOOL ON
SET SERVEROUTPUT ON 
SET HEADING OFF
SET LINESIZE 3000
SET PAGESIZE 0
set long 2000000000
column res Format a20000
ALTER SESSION SET NLS_DATE_FORMAT = 'YY-MM-DD';

EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'SQLTERMINATOR', TRUE);
EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'PRETTY', TRUE);
EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'TABLESPACE', TRUE);
EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'SEGMENT_ATTRIBUTES', TRUE);
EXECUTE DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'STORAGE',false);
EXEC DBMS_OUTPUT.ENABLE(1000000);

SPOOL INDEX_DDL.SQL
SELECT DBMS_METADATA.GET_DDL('INDEX',index_name) as res from user_indexes;
SPOOL OFF

SPOOL PROCEDURE_DDL.SQL
SELECT DBMS_METADATA.GET_DDL('PROCEDURE',name) as res from (select distinct name from user_source where type='PROCEDURE');
SPOOL OFF

SPOOL FUNCTION_DDL.SQL
SELECT DBMS_METADATA.GET_DDL('FUNCTION',name) as res  from (select distinct name from user_source where type='FUNCTION');
SPOOL OFF

SPOOL SEQUENCE_DDL.SQL
SELECT DBMS_METADATA.GET_DDL('SEQUENCE',SEQUENCE_NAME) as res  from USER_SEQUENCES;
SPOOL OFF

SPOOL TABLE_DDL.SQL
SELECT DBMS_METADATA.GET_DDL('TABLE',TABLE_NAME,'UPADM') as res from USER_TABLES;
SPOOL OFF

SPOOL SYNONYM_DDL.SQL
SELECT DBMS_METADATA.GET_DDL ('SYNONYM', SYNONYM_NAME, OWNER) as res FROM   DBA_SYNONYMS WHERE  TABLE_OWNER = 'UPADM';
SPOOL OFF

SPOOL USER_DDL.SQL
SELECT DBMS_METADATA.GET_DDL('USER',USERNAME) AS METADATA FROM DBA_USERS WHERE USERNAME IN ('UAPIS','MIG','VAM','UAPIFS','PMH','UPADM');
SPOOL OFF

SPOOL USER_GRANT_DDL.SQL
SELECT DBMS_METADATA.GET_GRANTED_DDL('ROLE_GRANT',USERNAME ) FROM DBA_USERS WHERE USERNAME IN ('UAPIS','MIG','VAM','UAPIFS','PMH','UPADM');
SPOOL OFF

SPOOL USER_TAB_PRIV_DCL.SQL
BEGIN
    FOR C IN (SELECT * FROM USER_TAB_PRIVS WHERE GRANTEE IN ('UAPIS','MIG','VAM','UAPIFS','PMH','UPADM') ORDER BY GRANTEE) LOOP
        DBMS_OUTPUT.PUT_LINE('GRANT '||C.PRIVILEGE||' ON '||C.GRANTOR||'.'||C.TABLE_NAME||' TO '||C.GRANTEE||';'); 
    END LOOP;
END;
/
SPOOL OFF

=========================
SEGMENT 내용만 제거
=========================
sed -i'' -r -e "s/SEGMENT CREATION IMMEDIATE|SEGMENT CREATION DEFERRED//p" TABLE_DDL.SQL 
sed -i'' -r -e "s/SEGMENT CREATION IMMEDIATE|SEGMENT CREATION DEFERRED//p" INDEX_DDL.SQL 

#테이블 데이터 추출
#/bin/bash
#LIST="TB_SERVICE_LIST, TB_IF_BUF, TB_CUST_PROF, TB_SERVICE_LIST_TEMP, TB_USER_GRP, TB_ADLT_AUTH_BUF, TB_CP_PROFILE, TB_SERVICE_BUF, TB_REQ_JOB, TB_MENU_ACCESS_AUTH, AA, ABC, ADDED_COIS_BASE, AUDIT_CUST_UAPS_BASE, AUDIT_UAPS_ONLY, AUDIT_UKEY_ONLY, BAK_TB_BINUS_CUST_REQ, BAK_TB_BPS_IFS_ERR, BAK_TB_BPS_IFS_LOG, BAK_TB_EIR_PPG_TRANS_LOG, BAK_TB_IFS_PPG_PROC, BAK_TB_UAF_BINUS_VER, BUFFER_CACHE, DJMS, EJMS, IMSI_CUST, IMSI_CUST_TSROTE, JOAJOA_TEST, JOAJOA_TEST_2, JOB_LOG, PLAN_TABLE, SNAP_ADDED_SVC, TB_ACL_INFO, TB_ACL_INFO_HIST, TB_ADDED_SVC, TB_ADDED_SVC_GROUP, TB_ADDED_SVC_REQ_BUF, TB_ADLT_AUTH_REPORT, TB_ADULT_SERVICE_LOG, TB_APPROVED_CUST, TB_APPROVED_CUST_HIST, TB_ASIS_AUTH_CODE, TB_ATTACH_FILE, TB_AUTH_MOD_BUF, TB_BOOKMARK, TB_BPCIM_IF, TB_BP_FILELOG, TB_BULLETIN, TB_BUNDLE, TB_BUNDLE_ATTRIBUTE, TB_BUNDLE_DEVICE, TB_BUNDLE_WHERE, TB_CDS_IFS_ERR, TB_CDS_IFS_ERR_01, TB_CDS_IFS_ERR_BAK, TB_CDS_LOG, TB_CDS_RECOVERY_QUEUE, TB_CDS_SIMUL_DATA, TB_CD_SOURCE, TB_CD_TP, TB_CD_VAL, TB_CHARGE_CD, TB_CHG_PLUS, TB_CHG_PLUS_HIST, TB_CHG_PLUS_HIST_BAK, TB_CLOB_TEST, TB_CODE, TB_COMPO, TB_CP, TB_CP_ALARM_HIST, TB_CP_CONN_TEMPLATE, TB_CP_ERROR_CODE, TB_CP_ERR_INFO, TB_CP_ERR_SUM, TB_CP_HIST, TB_CP_IF_SUM, TB_CP_IP, TB_CP_IP_BUF, TB_CP_IP_TEMP, TB_CP_JOB_LIST, TB_CP_LDAP_CONN, TB_CP_LDAP_CONN_HIST, TB_CP_LDAP_CONN_STAT, TB_CP_LDAP_MONITOR, TB_CP_LDAP_MONITOR_STAT, TB_CP_MNG, TB_CP_PROFILE_CONN, TB_CP_PROFILE_MAP, \
#TB_CP_PROFILE_MASTER, TB_CP_PROFILE_MASTER_20170531, TB_CP_RECONN_HIST, TB_CP_REQ_LOG, TB_CP_REQ_SUM, TB_CP_SERVICE_INFO, TB_CP_SVC_SUM, TB_CP_TRANSACTION, TB_CP_TRAN_DAILY, TB_CP_TRAN_HOUR, TB_CP_TRAN_MIN, TB_CP_TRAN_MIN10, TB_CP_USER_GRP, TB_CSCENTER_BUF, TB_CUST_ADDED_SVC, TB_CUST_ADDED_SVC_HIST, TB_CUST_ADDED_SVC_HIST_BAK, TB_CUST_APPL, TB_CUST_BLACK_LIST, TB_CUST_CHILD, TB_CUST_CHILD_HIST, TB_CUST_CHILD_HIST_BAK, TB_CUST_GRANT, TB_CUST_GRANT_HIST, TB_CUST_GRANT_REQ_BUF, TB_CUST_HIST_BOOL, TB_CUST_PERSON, TB_CUST_PERSON_TEMP, TB_CUST_PROF_GLR_HIST, TB_CUST_PROF_HIST, TB_CUST_PROF_HIST_BAK, TB_CUST_PROF_TEMP, TB_CUST_UAP_MODEM, TB_CUST_UAP_MW_BUF, TB_CUST_UAP_MW_BUF_HIST, TB_CUST_UAP_MW_BUF_HIST_BAK, TB_CUST_UAP_PMH_BUF, TB_CUST_UAP_VAM_BUF, TB_CUS_AUTH, TB_CUS_AUTH_BUF, TB_CUS_AUTH_HIST, TB_CUS_AUTH_TEMP, TB_CUS_INFO_HIST, TB_DAILY_CHECK_BUPWAP, TB_DAILY_CHECK_DISK_HIST, TB_DAILY_CHECK_GLR_COUNT, TB_DAILY_CHECK_GLR_MAPDB, TB_DAILY_CHECK_PROC_HIST, TB_DAILY_CHECK_REPORT, TB_DAILY_CHECK_SAM, TB_DAILY_CHECK_TABLE_SP, TB_DAILY_CHECK_UPTIME, TB_DAILY_CHECK_VAM_COUNT, TB_DAILY_JOB, TB_DAILY_JOB_FILE, TB_DATA_TP, TB_DATEXTRACT_BUF, TB_DEVICE_BOOL, TB_DISK_UNITED, TB_ECT_SUPPORT_BUF, TB_EMAIL_SEND, TB_EMSG_TEMPLET, TB_ENTLOG, TB_EXCEPTION_BOOL, TB_FAMILY_SITE, TB_FAQ, TB_FLATSUM_BUF, TB_FLATSUM_CONN_BUF, TB_FLAT_DATA2, TB_FMI_SRC, TB_GLR_IFS_ERR, TB_GLR_RECOVERY, TB_GRANT, TB_GRANT_MENU, \
#TB_ICAS_ATTR, TB_ICAS_AUTH, TB_ICAS_AUTH_BUF, TB_ICAS_AUTH_HIST, TB_ICAS_COMPO, TB_ICAS_GRANT, TB_ICAS_GRANT_HIST, TB_ICAS_GRANT_REQ_BUF, TB_ICAS_SUB_COMPO, TB_ICAS_TEST_NUM_BUF, TB_IFS_REQ_SUM, TB_IF_REPORT, TB_IP_MOD_BUF, TB_IRM_MAP, TB_JOB_LINK, TB_JOB_LOG, TB_JOB_MSG_FLOW, TB_JOB_PROC_FLOW, TB_JOB_STATISTIC, TB_JOB_STATISTIC_BATCH, TB_LDAP_CONN_CTR_HIST, TB_LDAP_CONN_CTR_INFO, TB_LIMIT_EVEN, TB_LIMIT_HIST, TB_LIMIT_HIST_BAK, TB_LIMIT_ODD, TB_LIMIT_ODD_BK_20170208, TB_LOGIN_HIST, TB_LOG_TRAILER_OFFSET, TB_MENU, TB_MENU_EXEC_AUTH, TB_MENU_LIST, TB_META_BUF, TB_MNG_TRANS_BUF, TB_MP_INFO_BUF, TB_MSG_QUEUE, TB_MSG_RESULT, TB_MULTI_NUM, TB_MULTI_NUM_HIST, TB_NATEIFS_TRAN_DAILY, TB_NATEIFS_TRAN_HOUR, TB_NATEIFS_TRAN_MIN, TB_NATEIFS_TRAN_MIN10, TB_NGCP_AUTH, TB_NM_SPACE, TB_NOMODEL_INFO, TB_NOTICE, TB_NOTIFICATION, TB_OPEN_CP, TB_OPEN_CP_HIST, TB_OPEN_CP_TEMP, TB_OPEN_GRANT, TB_OPEN_GRANT_BUF, TB_OPEN_GRANT_HIST, TB_OPEN_GRANT_REQ_BUF, TB_OPMD, TB_OPMD_HIST, TB_OPMD_HIST_BAK, TB_PARTNER, TB_PARTNER_COMPANY, TB_PARTNER_COMPANY_IF, TB_PDS, TB_PMH_IFS_LOG, TB_PRCS_UNITED, TB_PROC_BAD_LOG, TB_PROC_JOB_HIST, TB_PROC_RETRY, TB_PROC_TRANS_HIST, TB_PROC_USERS, TB_QNA, TB_REQ_JOB_MAPPING, TB_RET_CMT, TB_SERVER_INFO, TB_SERVER_INFO_BUF, TB_SERVER_INFO_HIST, TB_SERVER_INFO_TEMP, TB_SERVICE, TB_SERVICE_LIST_HIST, TB_SHARE_SVC, TB_SKAF_IFS_ERR, TB_SKT_CUST_HIST_JOB, TB_SKT_EMP, TB_SKT_MGM_USER, TB_SMSG_TEMPLET, \
#TB_SMS_AUTH, TB_SMS_SEND, TB_SRVC_AGENCY_LINK, TB_SRVC_TRANS_BUF, TB_SUB_COMPO, TB_SVC_UAP_MW_BUF, TB_SVC_UAP_VAM_BUF, TB_SVC_UAP_VAM_BUF_TMP, TB_SYNC_CHECK, TB_SYNC_CHECK_RESULT, TB_SYNC_CODE, TB_TESTMP_BUF, TB_TEST_NUM, TB_TEST_NUM_HIST, TB_TEST_NUM_ICAS_LOG, TB_TEST_NUM_REQ_BUF, TB_TEST_STATS_DATA, TB_TMP_CUST_ADDED_SVC, TB_TMP_CUST_PROF, TB_TMP_CUST_PROF_FILE, TB_UAF_ATTR, TB_UAF_ATTR_VAL, TB_UAF_MAP, TB_UAF_UAP_MAPPING, TB_UAP, TB_UAPROF_AUTH, TB_UAPROF_AUTH_BUF, TB_UAPROF_AUTH_HIST, TB_UAP_ATTR, TB_UAP_ATTR_LIST, TB_UAP_ATTR_VAL, TB_UAP_CHANGE, TB_UAP_DEVICE_HIST_LOG, TB_UAP_DUP, TB_UAP_GRANT, TB_UAP_GRANT_HIST, TB_UAP_GRANT_REQ_BUF, TB_UAP_REQ_BUF, TB_UAP_SCHEMA_HIST_LOG, TB_UAP_VAM_BUF_HIST, TB_UPLOAD_FILE_LIST, TB_URI_REF, TB_USER, TB_USER_ADD_GROUP, TB_USER_GRANT, TB_USER_GRANT_REQ_BUF, TB_USER_LIST, TB_USER_LIST_BUF, TB_USER_LIST_IF, TB_USER_LIST_IF_HIST, TB_USER_PRIMARY_GROUP, TB_USER_PWD_HIST, TB_VAM_SEND_DATA, TB_VAM_SEND_RETRY, TB_WAP_LOG_ERR, TB_WAP_PRIME_DUP, TB_WORK_CD, TB_WORK_MAPPING, TMP_COMP_ICAS_UAPS, TMP_COMP_ICAS_UAPS2, TMP_ICAS_COMP, TMP_MVNO_A, TMP_MVNO_B, TMP_SYNC_CHECK, TMP_SYNC_CHECK_RESULT, TMP_UAPS_COMP, UAPS_IMSI_ONLY, UKEY_IMSI_ONLY, VAM_PKG_ADDED_SVC_BK, VAM_PKG_ADDED_SVC_GROUP_BK, XTOOL_PLAN_TABLE"

#exp upadm/oracle08 tables=$LIST file=/home/oracle/user/wony/export.dmp log=/home/oracle/user/wony/export.log query=" 'where rownum < 10000' " GRANTS=N INDEXES=N CONSTRAINTS=N TRIGGERS=N STATISTICS=NONE


==============================
포탈 DB 구성 순서
==============================
1. DB 생성
su - oraUAP
dbca -silent -createDatabase -templateName General_Purpose.dbc -gdbname GWIDEDEV -sid GWIDEDEV -sysDBAUserName sys -sysDBAPassword password -responseFile NO_VALUE -characterSet KO16MSWIN949 -memoryPercentage 20 -emConfiguration NONE

export ORACLE_SID=GWIDEDEV
sqlplus "/as sysdba"
아래 쿼리 조회 해서 생성된 SID 와 DATAFILE 리스트 확인
SELECT INSTANCE_NAME, STATUS, DATABASE_STATUS FROM V$INSTANCE;
SELECT * FROM GLOBAL_NAME;
SELECT NAME FROM V$DATAFILE;

2. 테이블스 페이스 추가
CREATE TABLESPACE DATA01 DATAFILE '/ORACLE/oradata/GWIDEDEV/data01.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;
CREATE TABLESPACE DATA02 DATAFILE '/ORACLE/oradata/GWIDEDEV/data02.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;
CREATE TABLESPACE DATA03 DATAFILE '/ORACLE/oradata/GWIDEDEV/data03.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;
CREATE TABLESPACE DATA04 DATAFILE '/ORACLE/oradata/GWIDEDEV/data04.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;

CREATE TABLESPACE INDEX01 DATAFILE '/ORACLE/oradata/GWIDEDEV/index01.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;
CREATE TABLESPACE INDEX02 DATAFILE '/ORACLE/oradata/GWIDEDEV/index02.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;
CREATE TABLESPACE INDEX03 DATAFILE '/ORACLE/oradata/GWIDEDEV/index03.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;
CREATE TABLESPACE INDEX04 DATAFILE '/ORACLE/oradata/GWIDEDEV/index04.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;

CREATE TABLESPACE TS_MWADM DATAFILE '/ORACLE/oradata/GWIDEDEV/ts_mwadm.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;
CREATE TABLESPACE BIG_IDX DATAFILE '/ORACLE/oradata/GWIDEDEV/big_idx.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;
CREATE TABLESPACE BIG_DATA DATAFILE '/ORACLE/oradata/GWIDEDEV/big_data.dbf' SIZE 64M AUTOEXTEND ON SEGMENT SPACE MANAGEMENT AUTO;

3. 사용자 추가
CREATE USER VAM IDENTIFIED BY oracle08 DEFAULT TABLESPACE USERS QUOTA UNLIMITED ON USERS;
CREATE USER MIG IDENTIFIED BY oracle08 DEFAULT TABLESPACE BIG_DATA QUOTA UNLIMITED ON BIG_DATA;
CREATE USER PMH IDENTIFIED BY oracle08 DEFAULT TABLESPACE USERS QUOTA UNLIMITED ON USERS;
CREATE USER UAPIS IDENTIFIED BY oracle08 DEFAULT TABLESPACE USERS QUOTA UNLIMITED ON USERS;
CREATE USER UPADM IDENTIFIED BY oracle08 DEFAULT TABLESPACE DATA01 QUOTA UNLIMITED ON DATA01;
CREATE USER UAPIFS IDENTIFIED BY oracle08 DEFAULT TABLESPACE USERS QUOTA UNLIMITED ON USERS;

CREATE ROLE CONNECT2;
GRANT CREATE VIEW, ALTER SESSION, CREATE SYNONYM, CREATE DATABASE LINK TO CONNECT2;

GRANT CONNECT, CONNECT2, RESOURCE TO VAM;
GRANT CONNECT, CONNECT2, RESOURCE TO MIG;
GRANT CONNECT, CONNECT2, RESOURCE TO PMH;
GRANT CONNECT, CONNECT2, RESOURCE TO UAPIS;
GRANT CONNECT, CONNECT2, RESOURCE TO UAPIFS;
GRANT CONNECT, CONNECT2, RESOURCE, DBA TO GAEBAL_UPADM;

CONNECT GAEBAL_UPADM

#export ORACLE_SID=GWIDEDEV
#imp gaebal_upadm/gaebal_upadm FROMUSER=UPADM TOUSER=GAEBAL_UPADM file=/home/oraUAP/user/wony/export.dmp \
#log=/home/oraUAP/user/wony/import.log GRANTS=N INDEXES=N CONSTRAINTS=N STATISTICS=NONE

sqlplus 접속한 폴더에 아래 파일들 놓고 실행
@SEQUENCE_DDL.SQL
@TABLE_DDL.SQL 
@INDEX_DDL.SQL
@FUNCTION_DDL.SQL
@PROCEDURE_DDL.SQL
@SYNONYM_DDL.SQL
@USER_TAB_PRIV_DCL.SQL

SET TERM ON
SET DEFINE OFF
SET AUTOCOMMIT ON
@INSERT_TABLE.SQL

-- JOB 등록 및 실행 (파티션 생성)
DECLARE 
JOB_NO NUMBER;
BEGIN
DBMS_JOB.SUBMIT(JOB_NO, 'ADD_PARTITIONS();', SYSDATE, 'SYSDATE + 1');
DBMS_OUTPUT.PUT_LINE('JOB NO : '||JOB_NO);
DBMS_JOB.RUN(JOB_NO);
END;
/

SET DEFINE OFF
SPOOL INSERT.LOG
@INSERT_TABLE.SQL
SPOOL OFF
==============================
포탈 DB 원복 순서
==============================
1. DB 삭제 dbca -silent -deleteDatabase -sourceDB GWIDEDEV -sysDBAUserName sys -sysDBAPassword password




==========================
-- 아래 내용은 참고용
==========================
-- 객체 삭제
--=================
--GAEBAL_UPADM 용
--=================
SET SERVEROUTPUT ON;
BEGIN
    FOR C IN (SELECT * FROM USER_OBJECTS ORDER BY OBJECT_TYPE) LOOP
        IF (C.OBJECT_TYPE = 'SEQUENCE') THEN
            DBMS_OUTPUT.PUT_LINE(C.OBJECT_NAME);
            --DBMS_OUTPUT.PUT_LINE('DROP SEQUENCE GAEBAL_UPADM.'||C.OBJECT_NAME);
            EXECUTE IMMEDIATE 'DROP SEQUENCE GAEBAL_UPADM.'||C.OBJECT_NAME;
        ELSIF (C.OBJECT_TYPE = 'TABLE') THEN
            DBMS_OUTPUT.PUT_LINE(C.OBJECT_NAME);
            --DBMS_OUTPUT.PUT_LINE('DROP TABLE GAEBAL_UPADM.'||C.OBJECT_NAME||' CASCADE CONSTRAINTS PURGE');
            EXECUTE IMMEDIATE 'DROP TABLE GAEBAL_UPADM.'||C.OBJECT_NAME||' CASCADE CONSTRAINTS PURGE';
        ELSIF (C.OBJECT_TYPE = 'FUNCTION') THEN
            DBMS_OUTPUT.PUT_LINE(C.OBJECT_NAME);
            --DBMS_OUTPUT.PUT_LINE('DROP FUNCTION GAEBAL_UPADM.'||C.OBJECT_NAME);
            EXECUTE IMMEDIATE 'DROP FUNCTION GAEBAL_UPADM.'||C.OBJECT_NAME;            
        ELSIF (C.OBJECT_TYPE = 'PROCEDURE') THEN
            DBMS_OUTPUT.PUT_LINE(C.OBJECT_NAME);
            --DBMS_OUTPUT.PUT_LINE('DROP PROCEDURE GAEBAL_UPADM.'||C.OBJECT_NAME);
            EXECUTE IMMEDIATE 'DROP PROCEDURE GAEBAL_UPADM.'||C.OBJECT_NAME;        
        END IF;
    END LOOP;
	FOR C IN (SELECT * FROM DBA_SYNONYMS WHERE TABLE_OWNER = 'GAEBAL_UPADM' AND OWNER = 'PUBLIC') LOOP
        DBMS_OUTPUT.PUT_LINE(C.SYNONYM_NAME);
        --DBMS_OUTPUT.PUT_LINE('DROP PUBLIC SYNONYM GAEBAL_UPADM.'||C.SYNONYM_NAME);
        EXECUTE IMMEDIATE 'DROP PUBLIC SYNONYM '||C.SYNONYM_NAME;                            		
	END LOOP;
	FOR C IN (SELECT * FROM DBA_SYNONYMS WHERE OWNER IN ('MIG','PMH','VAM','UAPIS','GAEBAL_UPADM','UAPIFS') AND TABLE_OWNER = 'GAEBAL_UPADM') LOOP
        DBMS_OUTPUT.PUT_LINE(C.SYNONYM_NAME);
        --DBMS_OUTPUT.PUT_LINE('DROP SYNONYM GAEBAL_UPADM.'||C.SYNONYM_NAME);
        EXECUTE IMMEDIATE 'DROP SYNONYM '||C.OWNER||'.'||C.SYNONYM_NAME;                            		
	END LOOP;
    --FOR D IN (SELECT * FROM USER_INDEXES WHERE NOT REGEXP_LIKE(INDEX_NAME, '^SYS') AND NOT REGEXP_LIKE(INDEX_NAME, '^PK')) LOOP
	FOR D IN (SELECT * FROM USER_INDEXES) LOOP
        DBMS_OUTPUT.PUT_LINE(D.INDEX_NAME);
        --DBMS_OUTPUT.PUT_LINE('DROP INDEX GAEBAL_UPADM.'||D.INDEX_NAME||' FORCE');
        EXECUTE IMMEDIATE 'DROP INDEX GAEBAL_UPADM.'||D.INDEX_NAME||' FORCE';                            
    END LOOP;    
END;
/

--=================
--UPADM 용
--=================
SET SERVEROUTPUT ON
BEGIN
    FOR C IN (SELECT * FROM USER_OBJECTS ORDER BY OBJECT_TYPE) LOOP
        IF (C.OBJECT_TYPE = 'SEQUENCE') THEN
            DBMS_OUTPUT.PUT_LINE(C.OBJECT_NAME);
            --DBMS_OUTPUT.PUT_LINE('DROP SEQUENCE UPADM.'||C.OBJECT_NAME);
            EXECUTE IMMEDIATE 'DROP SEQUENCE UPADM.'||C.OBJECT_NAME;
        ELSIF (C.OBJECT_TYPE = 'TABLE') THEN
            DBMS_OUTPUT.PUT_LINE(C.OBJECT_NAME);
            --DBMS_OUTPUT.PUT_LINE('DROP TABLE UPADM.'||C.OBJECT_NAME||' CASCADE CONSTRAINTS PURGE');
            EXECUTE IMMEDIATE 'DROP TABLE UPADM.'||C.OBJECT_NAME||' CASCADE CONSTRAINTS PURGE';
        ELSIF (C.OBJECT_TYPE = 'FUNCTION') THEN
            DBMS_OUTPUT.PUT_LINE(C.OBJECT_NAME);
            --DBMS_OUTPUT.PUT_LINE('DROP FUNCTION UPADM.'||C.OBJECT_NAME);
            EXECUTE IMMEDIATE 'DROP FUNCTION UPADM.'||C.OBJECT_NAME;            
        ELSIF (C.OBJECT_TYPE = 'PROCEDURE') THEN
            DBMS_OUTPUT.PUT_LINE(C.OBJECT_NAME);
            --DBMS_OUTPUT.PUT_LINE('DROP PROCEDURE UPADM.'||C.OBJECT_NAME);
            EXECUTE IMMEDIATE 'DROP PROCEDURE UPADM.'||C.OBJECT_NAME;        
        END IF;
    END LOOP;
	FOR C IN (SELECT * FROM DBA_SYNONYMS WHERE TABLE_OWNER = 'UPADM' AND OWNER = 'PUBLIC') LOOP
        DBMS_OUTPUT.PUT_LINE(C.SYNONYM_NAME);
        --DBMS_OUTPUT.PUT_LINE('DROP PUBLIC SYNONYM UPADM.'||C.SYNONYM_NAME);
        EXECUTE IMMEDIATE 'DROP PUBLIC SYNONYM '||C.SYNONYM_NAME;                            		
	END LOOP;
	FOR C IN (SELECT * FROM DBA_SYNONYMS WHERE OWNER IN ('MIG','PMH','VAM','UAPIS','UPADM','UAPIFS') AND TABLE_OWNER = 'UPADM') LOOP
        DBMS_OUTPUT.PUT_LINE(C.SYNONYM_NAME);
        --DBMS_OUTPUT.PUT_LINE('DROP SYNONYM UPADM.'||C.SYNONYM_NAME);
        EXECUTE IMMEDIATE 'DROP SYNONYM '||C.OWNER||'.'||C.SYNONYM_NAME;                            		
	END LOOP;
    --FOR D IN (SELECT * FROM USER_INDEXES WHERE NOT REGEXP_LIKE(INDEX_NAME, '^SYS') AND NOT REGEXP_LIKE(INDEX_NAME, '^PK')) LOOP
	FOR D IN (SELECT * FROM USER_INDEXES) LOOP
        DBMS_OUTPUT.PUT_LINE(D.INDEX_NAME);
        --DBMS_OUTPUT.PUT_LINE('DROP INDEX UPADM.'||D.INDEX_NAME||' FORCE');
        EXECUTE IMMEDIATE 'DROP INDEX UPADM.'||D.INDEX_NAME||' FORCE';                            
    END LOOP;   
	EXECUTE IMMEDIATE 'PURGE RECYCLEBIN';	
END;
/

-- 권한 회수
REVOKE CONNECT, RESOURCE, DBA FROM GAEBAL_UPADM;

-- 접속 세션 KILL
BEGIN
    FOR C IN (select sid,serial# from v$session where username = 'GAEBAL_UPADM') LOOP
        EXECUTE IMMEDIATE 'ALTER SYSTEM KILL SESSION '''||C.SID||','||C.SERIAL#||''' '; 
    END LOOP;
END;
/

-- 사용자 제거
DROP USER GAEBAL_UPADM CASCADE;

-- DATAFILE 삭제 
DROP TABLESPACE DATA01 INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE DATA02 INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE DATA03 INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE DATA04 INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE INDEX01 INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE INDEX02 INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE INDEX03 INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE INDEX04 INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE TS_MWADM INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE BIG_IDX INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE BIG_DATA INCLUDING CONTENTS AND DATAFILES;


-- 권한 관련 추출 쿼리 (수정 필요)
SELECT DBMS_METADATA.GET_DDL('ROLE', role) as metadata  FROM dba_roles;
SELECT DBMS_METADATA.GET_GRANTED_DDL('ROLE_GRANT', role) as metadata FROM role_role_privs;
SELECT DBMS_METADATA.GET_GRANTED_DDL('SYSTEM_GRANT', role) as metadata FROM ROLE_SYS_PRIVS;
SELECT DBMS_METADATA.GET_GRANTED_DDL('OBJECT_GRANT', role) as metadata FROM ROLE_TAB_PRIVS;


-- 세션 정보 확인
SELECT A.USERNAME, A.SID, A.SERIAL#, B.XIDUSN, B.PROCESS, B.LOCKED_MODE, C.OBJECT_NAME, A.SQL_ID
FROM V$SESSION A, V$LOCKED_OBJECT B, DBA_OBJECTS C
WHERE A.SID = B.SESSION_ID
AND B.OBJECT_ID = C.OBJECT_ID
ORDER BY B.XIDUSN DESC;

--파라미터 정보 확인
SELECT * FROM NLS_DATABASE_PARAMETERS;
export NLS_LANG=AMERICAN_AMERICA.KO16MSWIN949
NLS_LANGUAGE                                                 AMERICAN
NLS_TERRITORY                                                AMERICA
NLS_CURRENCY                                                 $
NLS_ISO_CURRENCY                                             AMERICA
NLS_NUMERIC_CHARACTERS                                       .,
NLS_CHARACTERSET                                             KO16MSWIN949


